#!/bin/bash

# kurbeScript - Local Kubernetes Setup and Management Script
# This script sets up a local Kubernetes cluster using Minikube
# Repository: alx-backend-python
# Django Project: messaging_app
# File: messaging_app/kurbeScript

set -e  # Exit on any error

# Color codes for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Function to print colored output
print_status() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

print_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

print_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

print_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# Function to check if a command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to install Minikube on different platforms
install_minikube() {
    print_status "Installing Minikube..."
    
    case "$(uname -s)" in
        Linux*)
            print_status "Detected Linux system"
            if command_exists curl; then
                curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
                sudo install minikube-linux-amd64 /usr/local/bin/minikube
                rm minikube-linux-amd64
            else
                print_error "curl is required to install Minikube. Please install curl first."
                exit 1
            fi
            ;;
        Darwin*)
            print_status "Detected macOS system"
            if command_exists brew; then
                brew install minikube
            elif command_exists curl; then
                curl -LO https://storage.googleapis.com/minikube/releases/latest/minikube-darwin-amd64
                sudo install minikube-darwin-amd64 /usr/local/bin/minikube
                rm minikube-darwin-amd64
            else
                print_error "Either Homebrew or curl is required to install Minikube."
                exit 1
            fi
            ;;
        MINGW*|MSYS*|CYGWIN*)
            print_status "Detected Windows system"
            print_warning "For Windows, please download Minikube from: https://minikube.sigs.k8s.io/docs/start/"
            print_warning "Or use: winget install minikube"
            exit 1
            ;;
        *)
            print_error "Unsupported operating system: $(uname -s)"
            exit 1
            ;;
    esac
}

# Function to install kubectl
install_kubectl() {
    print_status "Installing kubectl..."
    
    case "$(uname -s)" in
        Linux*)
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
            ;;
        Darwin*)
            if command_exists brew; then
                brew install kubectl
            else
                curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/darwin/amd64/kubectl"
                chmod +x kubectl
                sudo mv kubectl /usr/local/bin/
            fi
            ;;
        *)
            print_error "Please install kubectl manually for your system"
            exit 1
            ;;
    esac
}

# Function to check and install prerequisites
check_prerequisites() {
    print_status "Checking prerequisites..."
    
    # Check if Minikube is installed
    if ! command_exists minikube; then
        print_warning "Minikube not found. Installing..."
        install_minikube
    else
        print_success "Minikube is already installed: $(minikube version --short)"
    fi
    
    # Check if kubectl is installed
    if ! command_exists kubectl; then
        print_warning "kubectl not found. Installing..."
        install_kubectl
    else
        print_success "kubectl is already installed: $(kubectl version --client --short 2>/dev/null)"
    fi
    
    # Check if Docker or another container runtime is available
    if command_exists docker; then
        print_success "Docker is available"
    elif command_exists podman; then
        print_success "Podman is available"
    else
        print_warning "No container runtime detected. Minikube will use its own containerization."
    fi
}

# Function to start Minikube cluster
start_cluster() {
    print_status "Starting Kubernetes cluster with Minikube..."
    
    # Check if Minikube is already running
    if minikube status >/dev/null 2>&1; then
        print_success "Minikube cluster is already running"
    else
        print_status "Starting new Minikube cluster..."
        # Start Minikube with some reasonable defaults
        minikube start --cpus=2 --memory=2048 --disk-size=10g
        
        if [ $? -eq 0 ]; then
            print_success "Minikube cluster started successfully"
        else
            print_error "Failed to start Minikube cluster"
            exit 1
        fi
    fi
}

# Function to verify cluster is running
verify_cluster() {
    print_status "Verifying cluster status..."
    
    # Wait a moment for cluster to be fully ready
    sleep 3
    
    print_status "Cluster information:"
    echo "----------------------------------------"
    kubectl cluster-info
    echo "----------------------------------------"
    
    # Check if cluster is responding
    if kubectl cluster-info >/dev/null 2>&1; then
        print_success "Cluster is running and responding to kubectl commands"
    else
        print_error "Cluster is not responding properly"
        exit 1
    fi
    
    # Show cluster status
    print_status "Cluster status:"
    minikube status
}

# Function to retrieve and display pods
get_pods() {
    print_status "Retrieving available pods..."
    echo "----------------------------------------"
    
    # Get pods from all namespaces
    print_status "Pods in all namespaces:"
    kubectl get pods --all-namespaces
    
    echo "----------------------------------------"
    
    # Get pods from default namespace specifically
    print_status "Pods in default namespace:"
    kubectl get pods
    
    # If no pods in default namespace, show a message
    pod_count=$(kubectl get pods --no-headers 2>/dev/null | wc -l)
    if [ "$pod_count" -eq 0 ]; then
        print_warning "No pods found in the default namespace."
        print_status "You can create a test pod with: kubectl run test-pod --image=nginx"
    fi
}

# Function to show helpful commands
show_helpful_commands() {
    print_status "Helpful commands for working with your cluster:"
    echo "----------------------------------------"
    echo "• View cluster info: kubectl cluster-info"
    echo "• Get all pods: kubectl get pods --all-namespaces"
    echo "• Create a test pod: kubectl run test-pod --image=nginx"
    echo "• View services: kubectl get services"
    echo "• View nodes: kubectl get nodes"
    echo "• Access Minikube dashboard: minikube dashboard"
    echo "• Stop Minikube: minikube stop"
    echo "• Delete Minikube cluster: minikube delete"
    echo "• SSH into Minikube: minikube ssh"
    echo "----------------------------------------"
}

# Main execution flow
main() {
    echo "========================================="
    echo "  kurbeScript - Local Kubernetes Setup  "
    echo "========================================="
    
    # Check and install prerequisites
    check_prerequisites
    
    # Start the cluster
    start_cluster
    
    # Verify the cluster is running
    verify_cluster
    
    # Retrieve available pods
    get_pods
    
    # Show helpful commands
    show_helpful_commands
    
    print_success "Kubernetes cluster setup complete!"
}

# Run main function
main "$@"
