name: Django CI

on:
  push:
    branches: ['**']
  pull_request:
    branches: ['**']

jobs:
  test:
    runs-on: ubuntu-latest

    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: test_db
          MYSQL_USER: django
          MYSQL_PASSWORD: django
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uroot -proot"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    env:
      MYSQL_DATABASE: test_db
      MYSQL_USER: django
      MYSQL_PASSWORD: django
      DB_HOST: 127.0.0.1
      DB_PORT: 3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade pip
          pip3 install -r messaging_app/requirements.txt
          pip3 install pytest pytest-django

      - name: Wait for MySQL
        run: |
          sudo apt-get install -y mysql-client
          until mysql -h 127.0.0.1 -P 3306 -udjango -pdjango -e "SELECT 1" test_db; do
            echo "Waiting for MySQL..."
            sleep 5
          done

      - name: Run migrations
        run: |
          python3 messaging_app/manage.py migrate --noinput

      - name: Run tests
        run: |
          pytest messaging_app/tests --disable-warnings -q

      - name: Run flake8 (Lint Check)
        run: |
          flake8 messaging_app --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 messaging_app --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
        continue-on-error: false

      - name: Wait for MySQL
        run: |
          sudo apt-get install -y mysql-client
          until mysql -h 127.0.0.1 -P 3306 -udjango -pdjango -e "SELECT 1" test_db; do
            echo "Waiting for MySQL..."
            sleep 5
          done

      - name: Run migrations
        run: |
          python3 messaging_app/manage.py migrate --noinput

      - name: Run tests with coverage
        run: |
          coverage run -m pytest messaging_app/tests --disable-warnings -q
          coverage xml
          coverage report

      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml
